name: CI/CD
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_REPO: polaris-secuone-dashboard
  IMAGE_LATEST: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_REPO }}:latest
  IMAGE_SHA:    ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_REPO }}:sha-${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # 1) 빌드툴 자동 감지
      - name: Detect build tool
        id: detect
        run: |
          if [ -f "mvnw" ] || [ -f "pom.xml" ]; then
            echo "tool=maven" >> $GITHUB_OUTPUT
          elif [ -f "gradlew" ] || [ -f "build.gradle" ]; then
            echo "tool=gradle" >> $GITHUB_OUTPUT
          else
            echo "No Maven/Gradle found in repo root"; exit 1
          fi

      # 2) 빌드 (Maven/Gradle 중 해당되는 것만)
      - name: Build (Maven)
        if: steps.detect.outputs.tool == 'maven'
        run: |
          mvn -B -DskipTests package
      - name: Build (Gradle)
        if: steps.detect.outputs.tool == 'gradle'
        run: |
          chmod +x ./gradlew || true
          ./gradlew clean bootJar -x test || ./gradlew bootJar -x test

      # 3) 산출물 JAR 자동 탐색 (서브폴더 대응)
      - name: Locate JAR
        id: jar
        run: |
          JAR=$(find . -type f -name "*.jar" -not -name "*sources*" -not -name "*javadoc*" | head -n1)
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR"
          test -n "$JAR" || (echo "JAR not found"; exit 1)

      # 4) GHCR 로그인 (GITHUB_TOKEN 사용)
      - name: Login GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # 5) Docker 빌드 & 푸시 (JAR 경로 주입)
      - name: Build & Push image
        run: |
          docker build \
            --build-arg JAR_FILE="${{ steps.jar.outputs.jar }}" \
            -t "$IMAGE_LATEST" -t "$IMAGE_SHA" .
          docker push "$IMAGE_LATEST"
          docker push "$IMAGE_SHA"

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Login GHCR (read)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull & Up
        run: |
          cd /home/tomcat/secuone
          docker pull "$IMAGE_LATEST"
          docker compose up -d
          docker image prune -f
